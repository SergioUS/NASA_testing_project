{
	"info": {
		"_postman_id": "78e39f2b-7d39-44a7-83dd-674cfc728781",
		"name": "Satellite Situation Center",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28411502"
	},
	"item": [
		{
			"name": "application_wadl",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// -------------------------------------------------------\r",
							"\r",
							"// ........  The service provides the Web Application Description Language (WADL) for these Web services ....\r",
							"\r",
							"// ----------------------------------------------------------\r",
							"\r",
							"// Test 1: Validate status code (should be 200)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test 2: Validate the response time (should be less than 500)\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"// Test 3: Validate the response size (should be less than 11 KB)\r",
							"pm.test(\"Response size is less than 11 KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(11000);\r",
							"});\r",
							"// Test 4: Response should be okay to process\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"// -----------------------------------------------------------\r",
							"const responseData = pm.response.text();\r",
							"// --------------------------------------------------------------\r",
							"\r",
							"// Test 5: Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
							"});\r",
							"// Check if the response contains WADL-specific elements\r",
							"pm.test(\"Response contains WADL-specific elements\", function () {\r",
							"    pm.expect(responseData).to.include('<application xmlns=\"http://wadl.dev.java.net/2009/02\">');\r",
							"});\r",
							"\r",
							"// Ensure there is no JSON body with an \"error\" field\r",
							"pm.test(\"Response does not contain JSON body with an 'error' field\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"// .................................................\r",
							"\r",
							"// Test: Verify response headers.\r",
							"pm.test(\"Verify the header keys are present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"    pm.response.to.have.header(\"X-Frame-Options\");\r",
							"    pm.response.to.have.header(\"Server\");\r",
							"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
							"    pm.response.to.have.header(\"Content-Security-Policy\");\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/vnd.sun.wadl+xml\");\r",
							"    pm.response.to.have.header(\"Last-modified\");\r",
							"    pm.response.to.have.header(\"Keep-Alive\");\r",
							"    pm.response.to.have.header(\"Connection\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://sscweb.gsfc.nasa.gov/WS/sscr/2/application.wadl",
					"protocol": "https",
					"host": [
						"sscweb",
						"gsfc",
						"nasa",
						"gov"
					],
					"path": [
						"WS",
						"sscr",
						"2",
						"application.wadl"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Observatories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// -------------------------------------------------------\r",
							"\r",
							"// ........  This service provides example client code to retrieve data for an observatory.  ....\r",
							"// ...Significant Response Headers: \"ETag\", \"Cache-Control\"\r",
							"\r",
							"// ----------------------------------------------------------\r",
							"\r",
							"// Test 1: Validate status code (should be 200)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test 2: Validate the response time (should be less than 500)\r",
							"pm.test(\"Response time is less than 5500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5500);\r",
							"});\r",
							"// Log the response size to the console\r",
							"console.log(\"Response size in bytes:\", pm.response.responseSize);\r",
							"// ---------------------------------------------------------------\r",
							"// Test 3: Validate the response size (should be less than 11 KB)\r",
							"pm.test(\"Response size is less than 11 KB\", function () {\r",
							"    // 11 KB = 11 * 1024 bytes\r",
							"    const sizeLimit = 11 * 1024;\r",
							"    const responseSize = pm.response.responseSize;\r",
							"\r",
							"    // Log the size limit and actual response size for debugging\r",
							"    console.log(\"Response size in bytes:\", responseSize);\r",
							"    console.log(\"Size limit in bytes:\", sizeLimit);\r",
							"\r",
							"    // Perform the assertion\r",
							"    pm.expect(responseSize).to.be.below(sizeLimit);\r",
							"});\r",
							"// ----------------------------------------------\r",
							"// Test 4: Response should be okay to process\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"// -----------------------------------------------------------\r",
							"const responseData = pm.response.text();\r",
							"// --------------------------------------------------------------\r",
							"\r",
							"// Test 5: Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"// Ensure there is no JSON body with an \"error\" field\r",
							"pm.test(\"Response does not contain JSON body with an 'error' field\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"// .................................................\r",
							"\r",
							"// Test: Verify response headers.\r",
							"pm.test(\"Verify the header keys are present\", function () {\r",
							"    pm.response.to.have.header(\"ETag\", 'W/\"570876743-gzip\"');\r",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-transform, max-age=3600\");\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"    pm.response.to.have.header(\"X-Frame-Options\");\r",
							"    pm.response.to.have.header(\"Server\");\r",
							"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
							"    pm.response.to.have.header(\"Content-Security-Policy\");\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");\r",
							"    pm.response.to.have.header(\"Keep-Alive\");\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://sscweb.gsfc.nasa.gov/WS/sscr/2/observatories",
					"protocol": "https",
					"host": [
						"sscweb",
						"gsfc",
						"nasa",
						"gov"
					],
					"path": [
						"WS",
						"sscr",
						"2",
						"observatories"
					]
				}
			},
			"response": []
		},
		{
			"name": "The_List_of_All_Observatories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ...... The list of all observatories displayed in the Console  .................\r",
							"\r",
							"// Parse the XML response body\r",
							"const responseXml = pm.response.text();\r",
							"const parseString = require('xml2js').parseString;\r",
							"\r",
							"parseString(responseXml, { explicitArray: false }, function (err, result) {\r",
							"    if (err) {\r",
							"        console.log(\"Error parsing XML:\", err);\r",
							"    } else {\r",
							"        // Extract Observatory elements\r",
							"        const observatories = result.ObservatoryResponse.Observatory;\r",
							"\r",
							"        // Handle single or multiple observatories\r",
							"        const observatoryArray = Array.isArray(observatories) ? observatories : [observatories];\r",
							"\r",
							"        // Iterate through the observatories and log their Id values\r",
							"        observatoryArray.forEach(function (observatory) {\r",
							"            console.log(observatory.Id);\r",
							"        });\r",
							"\r",
							"        // Verify that Id elements are present and print the number of Ids found\r",
							"        pm.test(\"Verify Id elements are present\", function () {\r",
							"            pm.expect(observatoryArray.length).to.be.above(0, \"No Id elements found\");\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://sscweb.gsfc.nasa.gov/WS/sscr/2/observatories",
					"protocol": "https",
					"host": [
						"sscweb",
						"gsfc",
						"nasa",
						"gov"
					],
					"path": [
						"WS",
						"sscr",
						"2",
						"observatories"
					]
				}
			},
			"response": []
		},
		{
			"name": "All Ground Stations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// -------------------------------------------------------\r",
							"\r",
							"// ..  This service provides descriptions of the ground stations that are available from SSC.   ....\r",
							"// ......... -Significant Response Headers: \"Last-Modified\", \"Cache-Control\"\r",
							"// ......... -Most Likely Response Codes: 200 - \"Ok\", 406 - \"Not Acceptable\"\r",
							"\r",
							"// ----------------------------------------------------------\r",
							"// Test 1: Check if the response status code is 200\r",
							"switch (pm.response.code) {\r",
							"    // ......... Most Likely Response Codes:\r",
							"    case 200:\r",
							"        pm.test(\"200 OK. The request has succeeded\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"        });\r",
							"        break;\r",
							"    case 406:\r",
							"        pm.test(\"406 Not Acceptable\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(408);\r",
							"        });\r",
							"        break;\r",
							"    // ......... Other Response Codes:\r",
							"    case 404:\r",
							"        pm.test(\"404 Not Found\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test(\"400 Bad Request\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test(\"401 Unauthorized\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"        });\r",
							"        break;\r",
							"    case 408:\r",
							"        pm.test(\"408 Request Timeout\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(408);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test(\"500 Internal Server Error\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"        });\r",
							"        break;\r",
							"    case 503:\r",
							"        pm.test(\"503 Server Unavailable\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(503);\r",
							"        });\r",
							"        break;\r",
							"    case 502:\r",
							"        pm.test(\"502 Bad Gateway\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(502);\r",
							"        });\r",
							"        break;\r",
							"    case 599:\r",
							"        pm.test(\"599 Network Connect Timeout Error\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(599);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    default:\r",
							"        pm.test(\"Unknown response code: \" + pm.response.code, function () {\r",
							"            pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 401, 500, 503, 502, 599, 408]);\r",
							"        });\r",
							"}\r",
							"\r",
							"// Test 2: Validate the response time (should be less than 500)\r",
							"pm.test(\"Response time is less than 5500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5500);\r",
							"});\r",
							"// Log the response size to the console\r",
							"console.log(\"Response size in bytes:\", pm.response.responseSize);\r",
							"// ---------------------------------------------------------------\r",
							"// Test 3: Validate the response size (should be less than 11 KB)\r",
							"pm.test(\"Response size is less than 11 KB\", function () {\r",
							"    // 11 KB = 11 * 1024 bytes\r",
							"    const sizeLimit = 11 * 1024;\r",
							"    const responseSize = pm.response.responseSize;\r",
							"\r",
							"    // Log the size limit and actual response size for debugging\r",
							"    console.log(\"Response size in bytes:\", responseSize);\r",
							"    console.log(\"Size limit in bytes:\", sizeLimit);\r",
							"\r",
							"    // Perform the assertion\r",
							"    pm.expect(responseSize).to.be.below(sizeLimit);\r",
							"});\r",
							"// ----------------------------------------------\r",
							"// Test 4: Response should be okay to process\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.body();\r",
							"});\r",
							"\r",
							"// -----------------------------------------------------------\r",
							"const responseData = pm.response.text();\r",
							"// --------------------------------------------------------------\r",
							"\r",
							"// Test 5: Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"// Ensure there is no JSON body with an \"error\" field\r",
							"pm.test(\"Response does not contain JSON body with an 'error' field\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"// Test: Verify the presence of 'version='1.0'' in the response text\r",
							"pm.test(\"Verify the response includes version='1.0'\", function () {\r",
							"    pm.expect(responseData).to.include('version=\"1.0\"');\r",
							"});\r",
							"// ...................................................................\r",
							"\r",
							"// Test: Check if body containes important fields:\r",
							"pm.test(\"Body containes important fields\", function () {\r",
							"    pm.expect(responseData).to.include(\"id\");\r",
							"    pm.expect(responseData).to.include(\"Name\");\r",
							"    pm.expect(responseData).to.include(\"Location\");\r",
							"    pm.expect(responseData).to.include(\"GroundStation\");\r",
							"    pm.expect(responseData).to.include(\"Latitude\");\r",
							"    pm.expect(responseData).to.include(\"Longitude\");\r",
							"});\r",
							"\r",
							"// Test: Verify response headers.\r",
							"pm.test(\"Verify the header keys are present\", function () {\r",
							"    // ......... Significant Response Headers:\r",
							"    pm.response.to.have.header(\"Last-Modified\");\r",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-transform, max-age=86400\");\r",
							"    // ......... Other Response Headers:\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"    pm.response.to.have.header(\"X-Frame-Options\");\r",
							"    pm.response.to.have.header(\"Server\");\r",
							"    pm.response.to.have.header(\"Strict-Transport-Security\");\r",
							"    pm.response.to.have.header(\"Content-Security-Policy\");\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/xml\");\r",
							"    pm.response.to.have.header(\"Keep-Alive\");\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://sscweb.gsfc.nasa.gov/WS/sscr/2/groundStations",
					"protocol": "https",
					"host": [
						"sscweb",
						"gsfc",
						"nasa",
						"gov"
					],
					"path": [
						"WS",
						"sscr",
						"2",
						"groundStations"
					]
				}
			},
			"response": []
		}
	]
}